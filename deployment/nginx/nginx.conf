user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/m;

    # Upstream servers
    upstream mcp_servers {
        least_conn;
        server mcp-servers:8001 max_fails=3 fail_timeout=30s;
        server mcp-servers:8002 max_fails=3 fail_timeout=30s;
        server mcp-servers:8003 max_fails=3 fail_timeout=30s;
        server mcp-servers:8004 max_fails=3 fail_timeout=30s;
        server mcp-servers:8005 max_fails=3 fail_timeout=30s;
    }

    # Web application upstream
    upstream web_app {
        server web-app:8080 max_fails=3 fail_timeout=30s;
    }

    # Health check endpoint
    server {
        listen 80;
        server_name localhost;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Main server configuration
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # API endpoints
        location /api/virustotal/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://mcp-servers:8001/;
            include proxy_params;
        }

        location /api/servicenow/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://mcp-servers:8002/;
            include proxy_params;
        }

        location /api/cyberreason/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://mcp-servers:8003/;
            include proxy_params;
        }

        location /api/custom/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://mcp-servers:8004/;
            include proxy_params;
        }

        location /api/cloud-ivx/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://mcp-servers:8005/;
            include proxy_params;
        }

        # Static files
        location /static/ {
            alias /var/www/html/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Web application
        location / {
            proxy_pass http://web_app;
            include proxy_params;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /var/www/html;
        }
    }

    # HTTPS server (if SSL certificates are available)
    # server {
    #     listen 443 ssl http2;
    #     server_name _;
    #     
    #     ssl_certificate /etc/nginx/ssl/server.crt;
    #     ssl_certificate_key /etc/nginx/ssl/server.key;
    #     ssl_session_cache shared:SSL:1m;
    #     ssl_session_timeout 5m;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers on;
    #     
    #     # Same location blocks as HTTP server
    # }
}

