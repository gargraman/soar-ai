version: '3.8'

services:
  # MCP Servers
  mcp-servers:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: mcp-servers
    container_name: mcp-servers
    ports:
      - "8001:8001"  # VirusTotal
      - "8002:8002"  # ServiceNow
      - "8003:8003"  # CyberReason
      - "8004:8004"  # Custom REST
      - "8005:8005"  # Cloud IVX
    environment:
      - GOOGLE_CLOUD_PROJECT=svc-hackathon-prod07
      - GOOGLE_APPLICATION_CREDENTIALS=/app/config/service-account.json
      - AI_PROVIDER=google_vertex_gemini
      - ENVIRONMENT=production
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
      - ./config:/app/config
      - ./secrets:/app/secrets:ro
    restart: unless-stopped
    networks:
      - ai-soar-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/meta"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Application
  web-app:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: web-app
    container_name: web-app
    ports:
      - "8080:8080"
    environment:
      - GOOGLE_CLOUD_PROJECT=svc-hackathon-prod07
      - GOOGLE_APPLICATION_CREDENTIALS=/app/config/service-account.json
      - AI_PROVIDER=google_vertex_gemini
      - ENVIRONMENT=production
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
      - ./config:/app/config
      - ./secrets:/app/secrets:ro
      - ../static:/app/static
      - ../templates:/app/templates
    depends_on:
      - mcp-servers
    restart: unless-stopped
    networks:
      - ai-soar-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ../static:/var/www/html:ro
    depends_on:
      - mcp-servers
      - web-app
    restart: unless-stopped
    networks:
      - ai-soar-network

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ai-soar-network

  # Log Management
  fluentd:
    build: ./logging
    container_name: fluentd
    volumes:
      - ../logs:/fluentd/log
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    restart: unless-stopped
    networks:
      - ai-soar-network

networks:
  ai-soar-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data: